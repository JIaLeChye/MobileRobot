name: Auto Release

# This workflow controls version.py and creates project releases
# It ONLY runs when commit messages contain "release" keyword
# Library versions are handled by library-version-updater.yml

on:
  push:
    branches: [ master, main ]

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Check if should run
      id: should_run
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        AUTHOR=$(git log -1 --pretty=%an)
        
        echo "Commit message: $COMMIT_MESSAGE"
        echo "Author: $AUTHOR"
        
        # Skip if commit was made by any bot
        if [[ "$AUTHOR" == *"Bot"* ]] || [[ "$AUTHOR" == *"bot"* ]]; then
          echo "🤖 Skipping: Commit was made by a bot ($AUTHOR)"
          echo "should_run=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Skip if commit message indicates it's already a version/release commit
        if [[ "$COMMIT_MESSAGE" == *"🚀 Release"* ]] || [[ "$COMMIT_MESSAGE" == *"🔖 Auto-update"* ]]; then
          echo "🛑 Skipping: Commit is already a version/release commit"
          echo "should_run=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # ONLY RUN if commit message contains release keywords
        if [[ "$COMMIT_MESSAGE" == *"release"* ]] || [[ "$COMMIT_MESSAGE" == *"Release"* ]] || [[ "$COMMIT_MESSAGE" == *"RELEASE"* ]]; then
          echo "🚀 Release keyword detected in commit message"
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "ℹ️  No release keyword found in commit message"
          echo "💡 Use 'release' in your commit message to trigger a release"
          echo "should_run=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Auto increment version and create release
      if: steps.should_run.outputs.should_run == 'true'
      run: |
        echo "🚀 Creating new release..."
        
        # Get current version
        CURRENT=$(grep '__version__ = ' version.py | sed 's/__version__ = "\(.*\)"/\1/')
        echo "Current version: $CURRENT"
        
        # Increment patch version
        IFS='.' read -r major minor patch <<< "$CURRENT"
        NEW_PATCH=$((patch + 1))
        NEW_VERSION="$major.$minor.$NEW_PATCH"
        echo "New version: $NEW_VERSION"
        
        # Configure git with rebase strategy
        git config --global user.email "action@github.com"
        git config --global user.name "Release Bot"
        git config --global pull.rebase false
        
        # Fetch latest changes
        git fetch origin ${{ github.ref_name }}
        
        # Check if we're behind and pull if needed
        LOCAL=$(git rev-parse HEAD)
        REMOTE=$(git rev-parse origin/${{ github.ref_name }})
        
        if [ "$LOCAL" != "$REMOTE" ]; then
          echo "⚠️  Remote has new commits, pulling..."
          git pull origin ${{ github.ref_name }}
          
          # Re-extract version in case it changed
          CURRENT=$(grep '__version__ = ' version.py | sed 's/__version__ = "\(.*\)"/\1/')
          IFS='.' read -r major minor patch <<< "$CURRENT"
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="$major.$minor.$NEW_PATCH"
          echo "Updated new version after pull: $NEW_VERSION"
        fi
        
        # Update version.py
        sed -i "s/__version__ = \"$CURRENT\"/__version__ = \"$NEW_VERSION\"/" version.py
        
        # Update README badge
        sed -i "s/version-$CURRENT-blue/version-$NEW_VERSION-blue/" README.md
        
        # Commit and tag with retry logic
        git add version.py README.md
        git commit -m "🚀 Release v$NEW_VERSION" || exit 0
        git tag "v$NEW_VERSION"
        
        # Push with retry
        for i in {1..3}; do
          if git push origin HEAD:${{ github.ref_name }} && git push origin "v$NEW_VERSION"; then
            echo "✅ Successfully pushed release v$NEW_VERSION"
            break
          else
            echo "❌ Push attempt $i failed, retrying..."
            git fetch origin ${{ github.ref_name }}
            git pull origin ${{ github.ref_name }}
            sleep 2
          fi
        done
